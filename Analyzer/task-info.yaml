type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/Menu.java
  visible: true
  text: |
    package budget;

    import java.io.*;
    import java.util.Scanner;

    public class Menu {
        private final Scanner scanner = new Scanner(System.in);
        private final String inputFile = "purchases.txt";
        private BudgetManager budgetManager;

        public Menu() {
            budgetManager = new BudgetManager();
        }

        void run() {
            while (true) {
                printMenu();

                String choice = scanner.nextLine();

                switch (choice) {
                    case "1":
                        addIncome();
                        break;
                    case "2":
                        addPurchaseMenu();
                        break;
                    case "3":
                        showListOfPurchases();
                        break;
                    case "4":
                        showBalance();
                        break;
                    case "5":
                        saveData();
                        break;
                    case "6":
                        loadData();
                        break;
                    case "0":
                        System.out.println("Bye!");
                        return;
                    default:
                        break;
                }
            }
        }

        private void saveData() {
            try (
                    FileOutputStream fileOutputStream = new FileOutputStream(inputFile);
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(budgetManager);
                System.out.println("Purchases were saved!");
            } catch (IOException e) {
                //System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }

        private void loadData() {
            try (FileInputStream fi = new FileInputStream(new File(inputFile));
                 ObjectInputStream oi = new ObjectInputStream(fi)) {
                BudgetManager temp = (BudgetManager) oi.readObject();
                if (temp != null) {
                    budgetManager.setBalance(temp.getBalance());
                    budgetManager.addPurchasesFromFile(temp.getPurchaseList());
                    System.out.println("Purchases were loaded!");
                }
            } catch (IOException | ClassNotFoundException e) {
                System.out.println(e.getMessage());
            }
        }

        private void printMenu() {
            System.out.println("\nChoose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "5) Save\n" +
                    "6) Load\n" +
                    "0) Exit\n");
        }

        private void addIncome() {
            System.out.println("Enter income: ");
            int income = Integer.parseInt(scanner.nextLine());
            budgetManager.addIncome(income);
        }

        private void showBalance() {
            double budgetAmount = budgetManager.getBalance();
            System.out.printf("%nBalance: $%.2f%n", budgetAmount > 0 ? budgetAmount : 0.0d);
        }

        private void addPurchaseMenu() {
            while (true) {
                printAddPurchaseMenu();
                String choice = scanner.nextLine();
                Category category = null;
                switch (choice) {
                    case "1":
                        category = Category.Food;
                        break;
                    case "2":
                        category = Category.Clothes;
                        break;
                    case "3":
                        category = Category.Entertainment;
                        break;
                    case "4":
                        category = Category.Other;
                        break;
                    case "5":
                        return;
                    default:
                        break;
                }

                addPurchase(category);
            }
        }

        private void addPurchase(Category type) {
            System.out.println("Enter purchase name:");
            String purchaseName = scanner.nextLine();
            System.out.println("Enter its price:");
            double price = Double.parseDouble(scanner.nextLine());
            budgetManager.addPurchase(new Product(type, purchaseName, price));
        }

        private void showListOfPurchases() {
            if (budgetManager.isListEmpty()) {
                System.out.println("\nThe purchase list is empty!");
            } else {
                while (true) {
                    printListOfPurchasesMenu();
                    String choice = scanner.nextLine();
                    Category category = null;

                    switch (choice) {
                        case "1":
                            category = Category.Food;
                            break;
                        case "2":
                            category = Category.Clothes;
                            break;
                        case "3":
                            category = Category.Entertainment;
                            break;
                        case "4":
                            category = Category.Other;
                            break;
                        case "5":
                            category = Category.All;
                            break;
                        case "6":
                            return;
                        default:
                            break;
                    }
                    budgetManager.showAllPurchaseList(category);
                }
            }
        }

        private void printAddPurchaseMenu() {
            System.out.println("\nChoose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) Back\n");
        }

        private void printListOfPurchasesMenu() {
            System.out.println("\nChoose the type of purchases\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n" +
                    "5) All\n" +
                    "6) Back\n");
        }
    }
  learner_created: true
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.List;

    public class BudgetManager implements Serializable {
        private static final long serialVersionUID = 1L;
        private final List<Product> purchaseList;
        private double balance;


        public BudgetManager() {
            balance = 0.0d;
            purchaseList = new ArrayList<>();
        }

        public void addIncome(int income) {
            this.balance += income;
            System.out.println("Income was added!");
        }

        public void addPurchase(Product product) {
            purchaseList.add(product);
            balance -= product.getPrice();
            System.out.println("Purchase was added!");
        }

        public double getBalance() {
            return balance;
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public void addPurchasesFromFile(List<Product> list) {
            purchaseList.addAll(list);
        }

        public List<Product> getPurchaseList() {
            return new ArrayList<>(purchaseList);
        }

        public void showAllPurchaseList(Category type) {
            final String LIST_IS_EMPTY = "The purchase list is empty";
            double total = 0.0d;
            System.out.println(type.name() + ":");
            switch (type) {
                case Food:
                    if (purchaseList.stream().noneMatch(e -> e.getCategory() == Category.Food)) {
                        System.out.println(LIST_IS_EMPTY);
                        return;
                    } else {
                        total = purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Food)
                                .mapToDouble(Product::getPrice)
                                .sum();
                        purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Food)
                                .forEach(System.out::println);
                    }
                    break;
                case Clothes:
                    if (purchaseList.stream().noneMatch(e -> e.getCategory() == Category.Clothes)) {
                        System.out.println(LIST_IS_EMPTY);
                        return;
                    } else {
                        total = purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Clothes)
                                .mapToDouble(Product::getPrice)
                                .sum();
                        purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Clothes)
                                .forEach(System.out::println);
                    }
                    break;
                case Entertainment:
                    if (purchaseList.stream().noneMatch(e -> e.getCategory() == Category.Entertainment)) {
                        System.out.println(LIST_IS_EMPTY);
                        return;
                    } else {
                        total = purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Entertainment)
                                .mapToDouble(Product::getPrice)
                                .sum();
                        purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Entertainment)
                                .forEach(System.out::println);
                    }
                    break;
                case Other:
                    if (purchaseList.stream().noneMatch(e -> e.getCategory() == Category.Other)) {
                        System.out.println(LIST_IS_EMPTY);
                        return;
                    } else {
                        total = purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Other)
                                .mapToDouble(Product::getPrice)
                                .sum();
                        purchaseList.stream()
                                .filter(e -> e.getCategory() == Category.Other)
                                .forEach(System.out::println);
                    }
                    break;
                case All:
                    total = purchaseList.stream()
                            .mapToDouble(Product::getPrice)
                            .sum();
                    purchaseList.forEach(System.out::println);
                    break;
                default:
                    break;
            }
            System.out.printf("Total sum: $%.2f%n", total);

        }

        public boolean isListEmpty() {
            return purchaseList.isEmpty();
        }

        @Override
        public String toString() {
            return "BudgetManager{" +
                    "purchaseList=" + purchaseList +
                    ", balance=" + balance +
                    '}';
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: "��\0\x05sr\0\x14budget.BudgetManager\0\0\0\0\0\0\0\x01\x02\0\x02D\0\abalanceL\0\
    \fpurchaseListt\0\x10Ljava/util/List;xp@��\x1e�Q�sr\0\x13java.util.ArrayListx�\
    �\x1d��a�\x03\0\x01I\0\x04sizexp\0\0\0\x11w\x04\0\0\0\x11sr\0\x0ebudget.Product\0\
    \0\0\0\0\0\0\x01\x02\0\x03D\0\x05priceL\0\bcategoryt\0\x11Lbudget/Category;L\0\
    \x04namet\0\x12Ljava/lang/String;xp@A�\n=p��~r\0\x0fbudget.Category\0\0\0\0\0\0\
    \0\0\x12\0\0xr\0\x0ejava.lang.Enum\0\0\0\0\0\0\0\0\x12\0\0xpt\0\x04Foodt\0\vAlmond\
    \ 250gsq\0~\0\x05@\f\0\0\0\0\0\0q\0~\0\vt\0\x04Milksq\0~\0\x05@\x17�\x8f\\(�q\0\
    ~\0\vt\0\x0eRed Fuji Applesq\0~\0\x05@\x0f�\x1e�Q�q\0~\0\vt\0\x04Eggssq\0~\0\x05\
    @9��G�\x14{q\0~\0\vt\0\eFIJI Natural Artesian Watersq\0~\0\x05@!\x14z�G�\x14q\0\
    ~\0\vt\0\x1dHershey's milk chocolate barssq\0~\0\x05?�\0\0\0\0\0\0q\0~\0\vt\0\x1c\
    Great Value Broccoli Floretssq\0~\0\x05@\x19\x1e�Q�\x1fq\0~\0\vt\0\x13Keystone\
    \ Ground Beesq\0~\0\x05@!8Q�\x1e�~q\0~\0\tt\0\aClothest\0\tGildan LTsq\0~\0\x05\
    @*\0\0\0\0\0\0q\0~\0\x1dt\0&Men's Dual Defense Crew Socks 12 Pairssq\0~\0\x05\
    @3�Q�\x1e�q\0~\0\x1dt\0!Wrangler Men's Stretch Cargo Pantsq\0~\0\x05@$333333~q\0\
    ~\0\tt\0\nEntertainmentt\0\x1cLEGO DUPLO Town Farm Animalssq\0~\0\x05@!u\x8f\\\
    (�q\0~\0%t\0\x06Cinemasq\0~\0\x05@>\0\0\0\0\0\0q\0~\0%t\0\fSkate rentalsq\0~\0\
    \x05@3�p��\n=~q\0~\0\tt\0\x05Othert\0\x1dSensodyne Pronamel Toothpastesq\0~\0\x05\
    @$\0\0\0\0\0\0q\0~\0-t\0\x19Chick-fil-A $10 Gift Cardsq\0~\0\x05@\f\0\0\0\0\0\0\
    q\0~\0-t\0\x04Debtx"
  learner_created: true
- name: src/budget/Category.java
  visible: true
  text: |
    package budget;

    public enum Category {
        Food, Clothes, Entertainment, Other, All
    }
  learner_created: true
- name: src/budget/Product.java
  visible: true
  text: |
    package budget;

    import java.io.Serializable;

    public class Product implements Serializable {
        private static final long serialVersionUID = 1L;
        private Category category;
        private String name;
        private double price;

        public Product(Category category, String name, double price) {
            this.category = category;
            this.name = name;
            this.price = price;
        }

        public Category getCategory() {
            return category;
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        @Override
        public String toString() {
            return String.format("%s $%.2f", name, price);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 06 Dec 2021 12:57:32 UTC
record: -1
